// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: convertor.proto

package converter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CryptoCurrency int32

const (
	CryptoCurrency_BTC   CryptoCurrency = 0
	CryptoCurrency_ETH   CryptoCurrency = 1
	CryptoCurrency_USDT  CryptoCurrency = 2
	CryptoCurrency_BNB   CryptoCurrency = 3
	CryptoCurrency_SOL   CryptoCurrency = 4
	CryptoCurrency_XRP   CryptoCurrency = 5
	CryptoCurrency_ADA   CryptoCurrency = 6
	CryptoCurrency_DOGE  CryptoCurrency = 7
	CryptoCurrency_DOT   CryptoCurrency = 8
	CryptoCurrency_MATIC CryptoCurrency = 9
)

// Enum value maps for CryptoCurrency.
var (
	CryptoCurrency_name = map[int32]string{
		0: "BTC",
		1: "ETH",
		2: "USDT",
		3: "BNB",
		4: "SOL",
		5: "XRP",
		6: "ADA",
		7: "DOGE",
		8: "DOT",
		9: "MATIC",
	}
	CryptoCurrency_value = map[string]int32{
		"BTC":   0,
		"ETH":   1,
		"USDT":  2,
		"BNB":   3,
		"SOL":   4,
		"XRP":   5,
		"ADA":   6,
		"DOGE":  7,
		"DOT":   8,
		"MATIC": 9,
	}
)

func (x CryptoCurrency) Enum() *CryptoCurrency {
	p := new(CryptoCurrency)
	*p = x
	return p
}

func (x CryptoCurrency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoCurrency) Descriptor() protoreflect.EnumDescriptor {
	return file_convertor_proto_enumTypes[0].Descriptor()
}

func (CryptoCurrency) Type() protoreflect.EnumType {
	return &file_convertor_proto_enumTypes[0]
}

func (x CryptoCurrency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoCurrency.Descriptor instead.
func (CryptoCurrency) EnumDescriptor() ([]byte, []int) {
	return file_convertor_proto_rawDescGZIP(), []int{0}
}

type ConversionType int32

const (
	ConversionType_WITHDRAWAL ConversionType = 0
	ConversionType_DONATION   ConversionType = 1
)

// Enum value maps for ConversionType.
var (
	ConversionType_name = map[int32]string{
		0: "WITHDRAWAL",
		1: "DONATION",
	}
	ConversionType_value = map[string]int32{
		"WITHDRAWAL": 0,
		"DONATION":   1,
	}
)

func (x ConversionType) Enum() *ConversionType {
	p := new(ConversionType)
	*p = x
	return p
}

func (x ConversionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversionType) Descriptor() protoreflect.EnumDescriptor {
	return file_convertor_proto_enumTypes[1].Descriptor()
}

func (ConversionType) Type() protoreflect.EnumType {
	return &file_convertor_proto_enumTypes[1]
}

func (x ConversionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversionType.Descriptor instead.
func (ConversionType) EnumDescriptor() ([]byte, []int) {
	return file_convertor_proto_rawDescGZIP(), []int{1}
}

type ConversionStatus int32

const (
	ConversionStatus_PENDING   ConversionStatus = 0
	ConversionStatus_COMPLETED ConversionStatus = 1
	ConversionStatus_FAILED    ConversionStatus = 2
	ConversionStatus_REJECTED  ConversionStatus = 3
)

// Enum value maps for ConversionStatus.
var (
	ConversionStatus_name = map[int32]string{
		0: "PENDING",
		1: "COMPLETED",
		2: "FAILED",
		3: "REJECTED",
	}
	ConversionStatus_value = map[string]int32{
		"PENDING":   0,
		"COMPLETED": 1,
		"FAILED":    2,
		"REJECTED":  3,
	}
)

func (x ConversionStatus) Enum() *ConversionStatus {
	p := new(ConversionStatus)
	*p = x
	return p
}

func (x ConversionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_convertor_proto_enumTypes[2].Descriptor()
}

func (ConversionStatus) Type() protoreflect.EnumType {
	return &file_convertor_proto_enumTypes[2]
}

func (x ConversionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversionStatus.Descriptor instead.
func (ConversionStatus) EnumDescriptor() ([]byte, []int) {
	return file_convertor_proto_rawDescGZIP(), []int{2}
}

type ConversionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SourceAmount   string                 `protobuf:"bytes,2,opt,name=source_amount,json=sourceAmount,proto3" json:"source_amount,omitempty"`
	Currency       CryptoCurrency         `protobuf:"varint,3,opt,name=currency,proto3,enum=converter.CryptoCurrency" json:"currency,omitempty"`
	ConversionType ConversionType         `protobuf:"varint,4,opt,name=conversion_type,json=conversionType,proto3,enum=converter.ConversionType" json:"conversion_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	mi := &file_convertor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_convertor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_convertor_proto_rawDescGZIP(), []int{0}
}

func (x *ConversionRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConversionRequest) GetSourceAmount() string {
	if x != nil {
		return x.SourceAmount
	}
	return ""
}

func (x *ConversionRequest) GetCurrency() CryptoCurrency {
	if x != nil {
		return x.Currency
	}
	return CryptoCurrency_BTC
}

func (x *ConversionRequest) GetConversionType() ConversionType {
	if x != nil {
		return x.ConversionType
	}
	return ConversionType_WITHDRAWAL
}

type ConversionResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConversionType  ConversionType         `protobuf:"varint,2,opt,name=conversion_type,json=conversionType,proto3,enum=converter.ConversionType" json:"conversion_type,omitempty"`
	ConvertedAmount string                 `protobuf:"bytes,3,opt,name=converted_amount,json=convertedAmount,proto3" json:"converted_amount,omitempty"`
	ConversionId    int64                  `protobuf:"varint,4,opt,name=conversion_id,json=conversionId,proto3" json:"conversion_id,omitempty"`
	Status          ConversionStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=converter.ConversionStatus" json:"status,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConversionResponse) Reset() {
	*x = ConversionResponse{}
	mi := &file_convertor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionResponse) ProtoMessage() {}

func (x *ConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_convertor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionResponse.ProtoReflect.Descriptor instead.
func (*ConversionResponse) Descriptor() ([]byte, []int) {
	return file_convertor_proto_rawDescGZIP(), []int{1}
}

func (x *ConversionResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConversionResponse) GetConversionType() ConversionType {
	if x != nil {
		return x.ConversionType
	}
	return ConversionType_WITHDRAWAL
}

func (x *ConversionResponse) GetConvertedAmount() string {
	if x != nil {
		return x.ConvertedAmount
	}
	return ""
}

func (x *ConversionResponse) GetConversionId() int64 {
	if x != nil {
		return x.ConversionId
	}
	return 0
}

func (x *ConversionResponse) GetStatus() ConversionStatus {
	if x != nil {
		return x.Status
	}
	return ConversionStatus_PENDING
}

func (x *ConversionResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ConversionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConversionId  int64                  `protobuf:"varint,1,opt,name=conversion_id,json=conversionId,proto3" json:"conversion_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversionStatusRequest) Reset() {
	*x = ConversionStatusRequest{}
	mi := &file_convertor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionStatusRequest) ProtoMessage() {}

func (x *ConversionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_convertor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionStatusRequest.ProtoReflect.Descriptor instead.
func (*ConversionStatusRequest) Descriptor() ([]byte, []int) {
	return file_convertor_proto_rawDescGZIP(), []int{2}
}

func (x *ConversionStatusRequest) GetConversionId() int64 {
	if x != nil {
		return x.ConversionId
	}
	return 0
}

var File_convertor_proto protoreflect.FileDescriptor

const file_convertor_proto_rawDesc = "" +
	"\n" +
	"\x0fconvertor.proto\x12\tconverter\x1a\x1fgoogle/protobuf/timestamp.proto\"\xcc\x01\n" +
	"\x11ConversionRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12#\n" +
	"\rsource_amount\x18\x02 \x01(\tR\fsourceAmount\x125\n" +
	"\bcurrency\x18\x03 \x01(\x0e2\x19.converter.CryptoCurrencyR\bcurrency\x12B\n" +
	"\x0fconversion_type\x18\x04 \x01(\x0e2\x19.converter.ConversionTypeR\x0econversionType\"\xb1\x02\n" +
	"\x12ConversionResponse\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12B\n" +
	"\x0fconversion_type\x18\x02 \x01(\x0e2\x19.converter.ConversionTypeR\x0econversionType\x12)\n" +
	"\x10converted_amount\x18\x03 \x01(\tR\x0fconvertedAmount\x12#\n" +
	"\rconversion_id\x18\x04 \x01(\x03R\fconversionId\x123\n" +
	"\x06status\x18\x05 \x01(\x0e2\x1b.converter.ConversionStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\">\n" +
	"\x17ConversionStatusRequest\x12#\n" +
	"\rconversion_id\x18\x01 \x01(\x03R\fconversionId*n\n" +
	"\x0eCryptoCurrency\x12\a\n" +
	"\x03BTC\x10\x00\x12\a\n" +
	"\x03ETH\x10\x01\x12\b\n" +
	"\x04USDT\x10\x02\x12\a\n" +
	"\x03BNB\x10\x03\x12\a\n" +
	"\x03SOL\x10\x04\x12\a\n" +
	"\x03XRP\x10\x05\x12\a\n" +
	"\x03ADA\x10\x06\x12\b\n" +
	"\x04DOGE\x10\a\x12\a\n" +
	"\x03DOT\x10\b\x12\t\n" +
	"\x05MATIC\x10\t*.\n" +
	"\x0eConversionType\x12\x0e\n" +
	"\n" +
	"WITHDRAWAL\x10\x00\x12\f\n" +
	"\bDONATION\x10\x01*H\n" +
	"\x10ConversionStatus\x12\v\n" +
	"\aPENDING\x10\x00\x12\r\n" +
	"\tCOMPLETED\x10\x01\x12\n" +
	"\n" +
	"\x06FAILED\x10\x02\x12\f\n" +
	"\bREJECTED\x10\x032\xb4\x01\n" +
	"\x10ConverterService\x12F\n" +
	"\aConvert\x12\x1c.converter.ConversionRequest\x1a\x1d.converter.ConversionResponse\x12X\n" +
	"\x13GetConversionStatus\x12\".converter.ConversionStatusRequest\x1a\x1d.converter.ConversionResponseB\rZ\v.;converterb\x06proto3"

var (
	file_convertor_proto_rawDescOnce sync.Once
	file_convertor_proto_rawDescData []byte
)

func file_convertor_proto_rawDescGZIP() []byte {
	file_convertor_proto_rawDescOnce.Do(func() {
		file_convertor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_convertor_proto_rawDesc), len(file_convertor_proto_rawDesc)))
	})
	return file_convertor_proto_rawDescData
}

var file_convertor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_convertor_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_convertor_proto_goTypes = []any{
	(CryptoCurrency)(0),             // 0: converter.CryptoCurrency
	(ConversionType)(0),             // 1: converter.ConversionType
	(ConversionStatus)(0),           // 2: converter.ConversionStatus
	(*ConversionRequest)(nil),       // 3: converter.ConversionRequest
	(*ConversionResponse)(nil),      // 4: converter.ConversionResponse
	(*ConversionStatusRequest)(nil), // 5: converter.ConversionStatusRequest
	(*timestamppb.Timestamp)(nil),   // 6: google.protobuf.Timestamp
}
var file_convertor_proto_depIdxs = []int32{
	0, // 0: converter.ConversionRequest.currency:type_name -> converter.CryptoCurrency
	1, // 1: converter.ConversionRequest.conversion_type:type_name -> converter.ConversionType
	1, // 2: converter.ConversionResponse.conversion_type:type_name -> converter.ConversionType
	2, // 3: converter.ConversionResponse.status:type_name -> converter.ConversionStatus
	6, // 4: converter.ConversionResponse.created_at:type_name -> google.protobuf.Timestamp
	3, // 5: converter.ConverterService.Convert:input_type -> converter.ConversionRequest
	5, // 6: converter.ConverterService.GetConversionStatus:input_type -> converter.ConversionStatusRequest
	4, // 7: converter.ConverterService.Convert:output_type -> converter.ConversionResponse
	4, // 8: converter.ConverterService.GetConversionStatus:output_type -> converter.ConversionResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_convertor_proto_init() }
func file_convertor_proto_init() {
	if File_convertor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_convertor_proto_rawDesc), len(file_convertor_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_convertor_proto_goTypes,
		DependencyIndexes: file_convertor_proto_depIdxs,
		EnumInfos:         file_convertor_proto_enumTypes,
		MessageInfos:      file_convertor_proto_msgTypes,
	}.Build()
	File_convertor_proto = out.File
	file_convertor_proto_goTypes = nil
	file_convertor_proto_depIdxs = nil
}
